<% /* views/mensajes.ejs */ %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@600&display=swap" rel="stylesheet">
<style>
  body {
    background: url('/images/boton_panel/mensajes.png') no-repeat center center fixed;
    background-size: cover;
    font-family: 'Press Start 2P', cursive, monospace;
    color: #fff;
    animation: fadeInBody 1s ease;
  }

  h2 {
    font-size: 1.2rem;
    text-align: center;
    padding: 15px;
    background: linear-gradient(135deg, #29f1f1, #2446dd);
    border-radius: 12px;
    box-shadow: 0 0 15px rgba(0,0,0,0.6);
    color: #fff;
  }

  /* üîπ Estructura general */
  .chat-wrap {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 20px;
  }

  .sidebar {
    width: 260px;
    min-width: 260px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 16px;
    padding: 16px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    height: fit-content;
    position: sticky;
    top: 16px;
    font-size: 0.7rem;
    text-transform: uppercase;
  }

  .sidebar a {
    font-family: 'Press Start 2P';
  }

  .timeline {
    flex: 1;
  }

  /* üí¨ Mensajes */
  .msg {
    max-width: 680px;
    border-radius: 20px;
    padding: 14px 16px;
    position: relative;
    font-size: 0.8rem;
    font-family: 'Press Start 2P', cursive, monospace;
    animation: fadeInUp 0.6s ease;
    border: 2px solid #fff;
    box-shadow: 0 0 15px rgba(255,255,255,0.4);
    margin-bottom: 1rem;
    word-wrap: break-word;
    overflow: hidden;
  }

  .msg.usuario {
    margin-left: auto;
    background: linear-gradient(135deg, #00f7ff, #3704af);
    color: #fff;
  }

  .msg.admin {
    background: #fff;
    color: #000;
  }

  .send-card {
    background: rgba(0, 0, 0, 0.7);
    border: 2px solid #29f1f1;
    border-radius: 15px;
    padding: 15px;
    box-shadow: 0 0 20px rgba(41, 241, 241, 0.6);
  }

  /* ü™ñ Soldadito */
  .saludo-img {
    max-width: 350px;
    filter: drop-shadow(0 0 15px rgba(0, 0, 0, 0.5));
    animation: bounceIn 1.5s ease;
    transition: transform 0.3s ease;
    transform-origin: bottom center;
    animation: waveSoldado 2.4s ease-in-out infinite; /* üëã animaci√≥n global */
  }

  /* üí¨ Globo del soldadito */
  .globo-dialogo {
    max-width: 600px;
    background: #fff;
    color: #000;
    font-family: 'Baloo 2', cursive;
    font-size: 1.1rem;
    line-height: 1.6;
    padding: 25px;
    border-radius: 25px;
    position: relative;
    box-shadow: 0 6px 20px rgba(0,0,0,0.4);
    animation: pulse 2s infinite;
  }

  .globo-dialogo::before {
    content: "";
    position: absolute;
    left: -20px;
    top: 50px;
    border-width: 12px;
    border-style: solid;
    border-color: transparent #fff transparent transparent;
  }

  @keyframes pulse {
    0% { transform: scale(1); box-shadow: 0 0 15px rgba(41,241,241,0.6); }
    50% { transform: scale(1.03); box-shadow: 0 0 25px rgba(36,70,221,0.8); }
    100% { transform: scale(1); box-shadow: 0 0 15px rgba(41,241,241,0.6); }
  }

  /* üëã Animaci√≥n suave del saludo */
  @keyframes waveSoldado {
    0%, 100% { transform: rotate(0deg); }
    25% { transform: rotate(5deg); }
    50% { transform: rotate(-4deg); }
    75% { transform: rotate(3deg); }
  }

  /* ‚öôÔ∏è Versiones grandes (PC) */
  @media (min-width: 769px) {
    .sidebar {
      order: 1;
    }
    .timeline {
      order: 2;
    }
  }

  /* üì± ESTILOS RESPONSIVE */
  @media (max-width: 768px) {
    body {
      background-attachment: scroll;
      font-size: 14px;
    }

    /* üîπ Bloque de saludo (soldadito + globo) */
    .d-flex.justify-content-center.align-items-center.gap-4.my-4 {
      flex-direction: column;
      align-items: center;
      text-align: center;
      gap: 8px;
    }

    /* üîπ Soldadito m√°s peque√±o y centrado */
    .saludo-img {
      max-width: 120px !important;
      display: block;
      margin: 0 auto 8px auto;
      filter: drop-shadow(0 0 10px rgba(0,0,0,0.4));
      animation: zoomInMobile 1.2s ease, waveSoldado 2.4s ease-in-out infinite;
    }

    /* üîπ Globo m√°s compacto y centrado */
    .globo-dialogo {
      max-width: 90%;
      font-size: 0.85rem;
      padding: 12px 16px;
      border-radius: 16px;
      line-height: 1.4;
      margin: 0 auto;
    }

    /* üîπ Reorganiza categor√≠as y mensajes */
    .chat-wrap {
      flex-direction: column;
      gap: 12px;
    }

    .sidebar {
      width: 100%;
      order: 1;
      margin-bottom: 10px;
    }

    .timeline {
      order: 2;
      width: 100%;
    }

    /* üîπ Ajustes de botones y mensajes */
    .btn {
      font-size: 0.8rem;
      padding: 8px 10px;
    }

    .msg {
      font-size: 0.75rem;
      padding: 10px;
    }

    @keyframes zoomInMobile {
      0% { transform: scale(0.7) rotate(-3deg); opacity: 0; }
      60% { transform: scale(1.05) rotate(2deg); opacity: 1; }
      100% { transform: scale(1) rotate(0deg); opacity: 1; }
    }
  }
</style>



<div class="container my-4">
  <h2>BANDEJA DE MENSAJES</h2>
  <!-- Soldadito saludando -->
<section class="saludo-soldado animate__animated animate__fadeInDown my-4 d-flex justify-content-center align-items-center gap-4">
   <img src="/images/saludo2.png" alt="Soldadito saludando" class="saludo-img">

  <div class="globo-dialogo">
    <p>
      Hola <%= user?.nombre || 'Soldado' %>,
      ¬°qu√© alegr√≠a recibir tu visita! üòä<br>
      Me encantar√≠a conocer tu opini√≥n sobre lo que viste aqu√≠ y resolver cualquier duda que tengas.<br>
      Escr√≠beme un mensaje y con gusto te responder√© lo m√°s pronto posible. ü•∞
    </p>
  </div>
</section>



  <!-- Formulario de env√≠o -->
  <div class="send-card p-3 mb-4">
    <form action="/mensajes" method="POST" id="formEnviar">
      <div class="mb-2">
        <label class="form-label">Escribe tu mensaje</label>
        <textarea name="mensaje" class="form-control" rows="3" required></textarea>
      </div>
      <button class="btn btn-info w-100 fw-bold" id="btnEnviar">Enviar</button>
    </form>
  </div>



<style>
  /* üì± ESTILOS RESPONSIVE */
  @media (max-width: 768px) {
    body {
      background-attachment: scroll;
      font-size: 14px;
    }

    /* üîπ Contenedor del saludo */
    .saludo-soldado {
      flex-direction: column;
      align-items: center;
      text-align: center;
      gap: 10px;
    }

    /* üîπ Imagen del soldadito */
    .saludo-img {
      max-width: 130px !important;
      margin: 0 auto 8px auto;
      display: block;
      filter: drop-shadow(0 0 10px rgba(0,0,0,0.5));
      animation: zoomInMobile 1.2s ease, waveSoldado 2.4s ease-in-out infinite;
    }

    /* üîπ Globo de di√°logo */
    .globo-dialogo {
      max-width: 92%;
      font-size: 0.9rem;
      padding: 12px 16px;
      border-radius: 16px;
      line-height: 1.4;
      margin: 0 auto;
      background: #fff;
      color: #000;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      animation: fadeInGlobo 1.5s ease;
    }

    /* ‚ú® Animaciones */
    @keyframes zoomInMobile {
      0% { transform: scale(0.7) rotate(-3deg); opacity: 0; }
      60% { transform: scale(1.05) rotate(2deg); opacity: 1; }
      100% { transform: scale(1) rotate(0deg); opacity: 1; }
    }

    @keyframes fadeInGlobo {
      0% { opacity: 0; transform: translateY(15px); }
      100% { opacity: 1; transform: translateY(0); }
    }

    /* üëã Movimiento de saludo */
    @keyframes waveSoldado {
      0%, 100% { transform: rotate(0deg); }
      25% { transform: rotate(4deg); }
      50% { transform: rotate(-4deg); }
      75% { transform: rotate(3deg); }
    }
  }
</style>


  <!-- üí¨ BLOQUE DE MENSAJES ACTUALIZADO -->
<div class="chat-wrap row justify-content-center mt-4">
  <!-- üóÇÔ∏è CATEGOR√çAS -->
  <aside class="sidebar col-12 col-lg-3 mb-4">
    <h6 class="mb-3 text-center">üìÇ Categor√≠as</h6>
    <div class="d-grid gap-2">
      <a class="btn btn-outline-primary fw-bold" href="/mensajes">Mis mensajes</a>
      <a class="btn btn-outline-warning fw-bold" href="/mensajes?f=favoritos">Favoritos ‚≠ê</a>
    </div>
  </aside>

  <!-- üíå LISTADO DE MENSAJES -->
  <section class="timeline col-12 col-lg-8">
    <% if (mensajes && mensajes.length) { %>
      <% mensajes.forEach(m => { %>
        <div class="mb-3">
          <div class="msg <%= m.enviado_por==='admin' ? 'admin' : 'usuario' %> animate__animated animate__fadeIn" id="msg-<%= m.id %>">
            
            <!-- üßæ ENCABEZADO MENSAJE -->
            <div class="d-flex justify-content-between align-items-start">
              <div class="me-2">
                <div class="fw-bold" style="<%= m.enviado_por !== 'admin' ? 'color:#000;' : '' %>">
                  <%= m.enviado_por === 'admin' ? 'Justito' : (user.nombre + ' ' + user.apellido) %>
                </div>
                <div class="text-muted small"><%= new Date(m.fecha).toLocaleString() %></div>
              </div>
              
              <!-- Estado -->
              <% if (m.enviado_por !== 'admin') { %>
                <% if (m.estado === 'respondido') { %>
                  <span class="status-badge">Respondido ‚úÖ</span>
                <% } else if (m.estado === 'leido') { %>
                  <span class="status-badge">Le√≠do üëÄ</span>
                <% } else { %>
                  <span class="status-badge">Enviado ‚è≥</span>
                <% } %>
              <% } %>
            </div>

            <!-- üí¨ CONTENIDO MENSAJE -->
            <p class="mt-2 mb-2" id="texto-<%= m.id %>"><%= m.mensaje %></p>

            <% if (m.imagen) { %>
              <img src="<%= m.imagen %>" alt="imagen" class="mt-2 img-fluid rounded shadow-sm"
                   style="max-width:200px; cursor:pointer"
                   onclick="verImagenGrande('<%= m.imagen %>')">
            <% } %>

            <!-- ‚úèÔ∏è BOTONES USUARIO -->
            <% if (m.enviado_por !== 'admin') { %>
              <div class="d-flex align-items-center gap-3">
                <button class="btn btn-sm btn-outline-primary" onclick="editarMensaje(<%= m.id %>)">Editar</button>
                <button class="btn btn-sm btn-outline-danger" onclick="eliminarMensaje(<%= m.id %>)">Eliminar</button>
              </div>
            <% } %>

            <!-- üéñÔ∏è REACCIONES ADMIN -->
            <% if (m.enviado_por==='admin') { %>
              <div class="mt-2 d-flex align-items-center gap-2">
                <span class="react-btn" onclick="handleReaction(<%= m.id %>, 'üëç')">üëç</span>
                <span class="react-btn" onclick="handleReaction(<%= m.id %>, '‚ù§Ô∏è')">‚ù§Ô∏è</span>
                <span class="react-btn" onclick="handleReaction(<%= m.id %>, 'üòÇ')">üòÇ</span>
                <span class="react-btn" onclick="handleReaction(<%= m.id %>, 'üéñÔ∏è')">üéñÔ∏è</span>
                <span class="fav <%= m.favorito ? '' : 'off' %>"
                      onclick="toggleFav(<%= m.id %>, <%= m.favorito ? 0 : 1 %>)">‚òÖ</span>
              </div>
            <% } %>

            <!-- ANIMACIONES -->
            <div class="animacion-reaccion" id="animacion-<%= m.id %>"></div>
            <div class="reaccion-destacada" id="reaccion-destacada-<%= m.id %>">
              <%= m.reaccion ? m.reaccion : '' %>
            </div>
          </div>
        </div>
      <% }) %>
    <% } else { %>
      <p class="text-center">‚ö° No tienes mensajes todav√≠a</p>
    <% } %>
  </section>
</div>

</div>


<audio id="snd" src="/audio/notify.mp3" preload="auto"></audio>
<canvas class="confetti" id="confetti" style="display:none"></canvas>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  // Enviar
  const btnEnviar = document.getElementById('btnEnviar');
  const formEnviar = document.getElementById('formEnviar');
  btnEnviar?.addEventListener('click', () => {
    btnEnviar.classList.add('animate__animated','animate__pulse');
    setTimeout(() => btnEnviar.classList.remove('animate__animated','animate__pulse'), 900);
  });
  formEnviar?.addEventListener('submit', () => { lanzarConfetti(20); });

  /* ‚ú® Editar / Eliminar (SweetAlert2) ‚Äî reemplaza las versiones con prompt/confirm */
async function editarMensaje(id){
  const p = document.getElementById('texto-'+id);
  const actual = (p?.textContent || '').trim();

  const { value: nuevo, isConfirmed } = await Swal.fire({
    title: 'Editar mensaje',
    input: 'textarea',
    inputValue: actual,
    inputLabel: 'Nuevo texto',
    inputPlaceholder: 'Escribe el mensaje‚Ä¶',
    showCancelButton: true,
    confirmButtonText: 'Guardar',
    cancelButtonText: 'Cancelar',
    showClass:{ popup:'animate__animated animate__zoomIn' },
    hideClass:{ popup:'animate__animated animate__fadeOut faster' }
  });

  if (!isConfirmed || !nuevo?.trim()) return;

  const res = await fetch(`/mensajes/${id}/editar`, {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({ mensaje: nuevo.trim() })
  }).then(r=>r.json()).catch(()=>({ok:false}));

  if (res.ok){
    p.textContent = nuevo.trim();
    Swal.fire({ title:'Guardado', icon:'success', timer:900, showConfirmButton:false });
  } else {
    Swal.fire({ title:'No se pudo editar', icon:'error' });
  }
}

async function eliminarMensaje(id){
  const { isConfirmed } = await Swal.fire({
    title: '¬øEliminar este mensaje?',
    text: 'Esta acci√≥n no se puede deshacer.',
    iconHtml: 'üóëÔ∏è',
    showCancelButton: true,
    confirmButtonText: 'S√≠, eliminar',
    cancelButtonText: 'Cancelar',
    reverseButtons: true,
    backdrop: 'rgba(0,0,0,.5)',
    showClass: { popup: 'animate__animated animate__zoomIn' },
    hideClass: { popup: 'animate__animated animate__fadeOut faster' }
  });
  if (!isConfirmed) return;

  const res = await fetch(`/mensajes/${id}/eliminar`, { method:'POST' })
                 .then(r=>r.json()).catch(()=>({ok:false}));

  if (res.ok){
    const cont = document.getElementById('texto-'+id)?.closest('.mb-3');
    if (cont){ cont.style.animation = 'fadeOut .3s both'; setTimeout(()=>cont.remove(), 300); }
    Swal.fire({ title:'Eliminado', icon:'success', timer:900, showConfirmButton:false });
  } else {
    Swal.fire({ title:'No se pudo eliminar', icon:'error' });
  }
}


  // Reacciones: guarda en BD y lanza la animaci√≥n
function handleReaction(id, emo) {
  fetch(`/mensajes/${id}/reaccion`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ reaccion: emo })
  })
  .then(r => r.json())
  .then(res => {
    if (res.ok) {
      // ‚úÖ Poner el emoji grande de forma permanente
      const fixed = document.getElementById("reaccion-destacada-" + id);
      if (fixed) {
        fixed.textContent = emo;
        fixed.style.animation = "none"; // reinicia animaci√≥n
        fixed.offsetHeight;
        fixed.style.animation = "pop 0.4s ease";
      }

      // ‚ú® Animaci√≥n flotante opcional
      reaccionar(id, emo);
    }
  })
  .catch(err => console.error("Error guardando reacci√≥n", err));
}


  // Favorito
  function toggleFav(id, v){
    fetch(`/mensajes/${id}/favorito`, {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ valor: String(v) })
    }).then(()=> location.reload());
  }

  // Polling nuevas respuestas
let lastCheck = Date.now();
setInterval(()=>{
  fetch(`/mensajes/check?desde=${lastCheck}`)
    .then(r=>r.json())
    .then(({n, now})=>{
      if(n>0){
        // üîî Notificaci√≥n animada con Justito
        notiJustito("¬°Tienes un nuevo mensaje de Justito!");
        // üîä Sonido opcional
        document.getElementById('snd')?.play().catch(()=>{});
      }
      lastCheck = now || Date.now();
    }).catch(()=>{});
}, 8000);

  // Confetti
  function lanzarConfetti(cantidad){
    const cv = document.getElementById('confetti');
    const ctx = cv.getContext('2d');
    const W = cv.width = window.innerWidth;
    const H = cv.height = window.innerHeight;
    cv.style.display = 'block';
    const parts = Array.from({length: cantidad}).map(()=>({x: Math.random()*W, y: -10, s: 6+Math.random()*8, v: 2+Math.random()*3}));
    let t = 0;
    function step(){
      ctx.clearRect(0,0,W,H);
      ctx.save();
      parts.forEach(p=>{ ctx.fillRect(p.x, p.y+=p.v, p.s, p.s); });
      ctx.restore();
      t++;
      if(t<60) requestAnimationFrame(step); else cv.style.display='none';
    }
    step();
  }

  // Ver imagen en grande
  function verImagenGrande(url) {
    document.getElementById("imagenGrande").src = url;
    document.getElementById("btnDescargarImagen").href = url;
    const modal = new bootstrap.Modal(document.getElementById("modalImagen"));
    modal.show();
  }

 
</script>

<div class="d-flex justify-content-end mb-3">
  <form id="formEliminarTodo" action="/mensajes/archivar-todo" method="POST">
  <button class="btn btn-danger btn-sm">üóëÔ∏è Eliminar toda la conversaci√≥n</button>
</form>
</div>

<!-- Modal Imagen -->
<div class="modal fade" id="modalImagen" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content bg-dark text-center position-relative">
      <img id="imagenGrande" src="" class="img-fluid rounded" style="max-height: 80vh; object-fit: contain;">
      <div class="p-2">
        <a id="btnDescargarImagen" href="#" download class="btn btn-success btn-sm">üì• Descargar</a>
        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">‚ùå Cerrar</button>
      </div>
    </div>
  </div>
</div>

<script>

document.getElementById('formEliminarTodo')?.addEventListener('submit', async (e)=>{
  e.preventDefault();
  const {isConfirmed} = await Swal.fire({
    title: '¬øEliminar toda la conversaci√≥n?',
    text: 'Esta acci√≥n eliminar√° todos tus mensajes.',
    iconHtml: 'üóëÔ∏è',
    showCancelButton: true,
    confirmButtonText: 'S√≠, eliminar todo',
    cancelButtonText: 'Cancelar',
    reverseButtons: true,
    showClass:{ popup:'animate__animated animate__zoomIn' },
    hideClass:{ popup:'animate__animated animate__fadeOut faster' }
  });
  if (isConfirmed) e.target.submit();
});


// üåü Mini Confetti Burst
function miniConfettiBurst(targetId) {
  const target = document.getElementById("msg-" + targetId);
  if (!target) return;

  const rect = target.getBoundingClientRect();
  const confetti = document.createElement("canvas");
  confetti.width = rect.width;
  confetti.height = rect.height;
  confetti.style.position = "absolute";
  confetti.style.left = rect.left + "px";
  confetti.style.top = rect.top + "px";
  confetti.style.pointerEvents = "none";
  confetti.style.zIndex = 3000;

  document.body.appendChild(confetti);

  const ctx = confetti.getContext("2d");
  const pieces = Array.from({ length: 20 }).map(() => ({
    x: Math.random() * rect.width,
    y: Math.random() * rect.height / 2,
    size: 4 + Math.random() * 6,
    color: `hsl(${Math.random() * 360}, 100%, 50%)`,
    vy: 2 + Math.random() * 3,
    vx: -2 + Math.random() * 4
  }));

  let frames = 0;
  function animate() {
    ctx.clearRect(0, 0, confetti.width, confetti.height);
    pieces.forEach(p => {
      ctx.fillStyle = p.color;
      ctx.fillRect(p.x, p.y, p.size, p.size);
      p.x += p.vx;
      p.y += p.vy;
    });
    frames++;
    if (frames < 40) {
      requestAnimationFrame(animate);
    } else {
      document.body.removeChild(confetti);
    }
  }
  animate();
}

// ‚ú® Animaciones de reacci√≥n + confetti
function reaccionar(id, tipo){
  const msg = document.getElementById("msg-"+id);
  const animBox = document.getElementById("animacion-"+id);

  // vibraci√≥n
  msg.classList.add("vibrar");
  setTimeout(()=> msg.classList.remove("vibrar"), 400);

  // limpiar animaci√≥n previa
  animBox.innerHTML = "";

  if(tipo === "‚ù§Ô∏è"){
    for(let i=0; i<5; i++){
      const span=document.createElement("span");
      span.textContent="‚ù§Ô∏è";
      span.style.left=`${Math.random()*80-40}px`;
      animBox.appendChild(span);
    }
  }
  else if(tipo === "üëç"){
    for(let i=0; i<4; i++){
      const span=document.createElement("span");
      span.textContent=i%2===0?"üëç":"üòä";
      span.style.left=`${Math.random()*80-40}px`;
      animBox.appendChild(span);
    }
  }
  else if(tipo === "üòÇ"){
    for(let i=0; i<4; i++){
      const span=document.createElement("span");
      span.textContent=i%2===0?"üòÇ":"Ja";
      span.style.left=`${Math.random()*80-40}px`;
      animBox.appendChild(span);
    }
  }
  else if(tipo === "üéñÔ∏è"){
    for(let i=0; i<5; i++){
      const span=document.createElement("span");
      span.textContent="üèÖ";
      span.style.left=`${Math.random()*80-40}px`;
      animBox.appendChild(span);
    }
  }

  // üéä Llamar al mini confetti
  miniConfettiBurst(id);

  // limpiar despu√©s de 2s
  setTimeout(()=> animBox.innerHTML="", 2000);
}
</script>
<script>
async function eliminarRespuesta(id){
  const { isConfirmed } = await Swal.fire({
    title: '¬øEliminar esta respuesta?',
    text: 'Esta acci√≥n no se puede deshacer.',
    icon: undefined,
    iconHtml: 'üóëÔ∏è',
    showCancelButton: true,
    confirmButtonText: 'S√≠, eliminar',
    cancelButtonText: 'Cancelar',
    reverseButtons: true,
    backdrop: 'rgba(0,0,0,.5)',
    showClass: { popup: 'animate__animated animate__zoomIn' },
    hideClass: { popup: 'animate__animated animate__fadeOut faster' }
  });

  if (!isConfirmed) return;

  const res = await fetch(`/admin/mensajes/eliminar/${id}`, { method: 'POST' })
    .then(r => r.json()).catch(() => ({ ok:false }));

  if (res.ok) {
    await Swal.fire({
      title: 'Eliminado',
      icon: 'success',
      timer: 1100,
      showConfirmButton: false,
      background: 'rgba(0,0,0,.85)',
      color:'#fff',
      showClass:{ popup:'animate__animated animate__fadeInUp' },
      hideClass:{ popup:'animate__animated animate__fadeOutDown faster' }
    });
    abrirConversacion(usuarioActivo); // recarga la conversaci√≥n
  } else {
    Swal.fire({
      title: 'Ups',
      text: 'No se pudo eliminar. Intenta de nuevo.',
      icon: 'error',
      confirmButtonText: 'Entendido',
      showClass:{ popup:'animate__animated animate__shakeX' }
    });
  }
}

function notiJustito(msg){
  Swal.fire({
    title: 'üì© Nuevo mensaje de Justito',
    text: msg || '¬°Tienes un nuevo mensaje!',
    toast: true,
    position: 'top',
    showConfirmButton: false,
    timer: 3500,
    timerProgressBar: true,
    background: '#3704af',
    color: '#fff',
    iconHtml: 'ü™ñ',
    customClass:{
      popup: 'animate__animated animate__fadeInDown'
    }
  });
}


</script>

<script>
async function editarRespuesta(id){
  const { value: nuevo, isConfirmed } = await Swal.fire({
    title: 'Editar respuesta',
    input: 'textarea',
    inputLabel: 'Nuevo texto',
    inputPlaceholder: 'Escribe la respuesta‚Ä¶',
    inputAttributes: { 'aria-label': 'Nuevo texto' },
    showCancelButton: true,
    confirmButtonText: 'Guardar',
    cancelButtonText: 'Cancelar',
    showClass:{ popup:'animate__animated animate__zoomIn' },
    hideClass:{ popup:'animate__animated animate__fadeOut faster' }
  });
  if (!isConfirmed || !nuevo?.trim()) return;

  const ok = await fetch(`/admin/mensajes/editar/${id}`,{
    method:'POST',
    headers:{ 'Content-Type':'application/json' },
    body: JSON.stringify({ respuesta: nuevo.trim() })
  }).then(r=>r.ok).catch(()=>false);

  if (ok) {
    Swal.fire({ title:'Guardado', icon:'success', timer:900, showConfirmButton:false });
    abrirConversacion(usuarioActivo);
  } else {
    Swal.fire({ title:'Error', text:'No se pudo guardar', icon:'error' });
  }
}

</script>


