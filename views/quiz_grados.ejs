<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Jerarquía Militar</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Fuente retro -->
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">

  <!-- Bootstrap y Animate.css -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    body {
      font-family: 'Press Start 2P', cursive;
      background: url('/images-requisitos/imagegrados2.png') no-repeat center center fixed;
      background-size: cover;
    }
    .wrap { max-width: 1100px; margin: 40px auto; padding: 16px; }

/* Grid para tarjetas disponibles y slots */
.grid-tarjetas {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(90px, 1fr));
  gap: 10px;
  justify-items: center;
}
.grid-tarjetas {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 12px; /* 👈 este espacio separa las tarjetas */
  justify-items: center;
}
/* Tarjetas */
.tarjeta {
  width: 100%;
  max-width: 120px;
  aspect-ratio: 3/4; /* mantiene proporción */
  background: linear-gradient(145deg, #e0ffe5, #ffffff);
  border: 2px solid #000;     /* 👈 igual que slot */
  border-radius: 8px;         /* 👈 igual que slot */
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: grab;
  box-shadow: 4px 4px 0 #000;
  user-select: none;
}

.tarjeta img {
  width: 100%;
  height: 100%;
  object-fit: contain; /* la imagen se ajusta sin deformarse */
  border-radius: 6px;  /* un pelín más pequeño que la tarjeta */
}

.tarjeta span {
  font-size: 10px;
  text-align: center;
}

/* Slots */
.slot {
  width: 100%;
  max-width: 120px;
  aspect-ratio: 3/4; /* mismo tamaño que tarjeta */
  border: 2px dashed #555;
  border-radius: 8px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 6px auto; /* separación */
}

.slot.ocupado {
  border: 2px solid #000; /* 👈 mismo grosor y color que la tarjeta */
  background: #f0fff0;
}

/* Contenedores */
.columna {
  min-height: 90vh;
  padding: 12px;
  border: 3px dashed #333;
  border-radius: 12px;
  background: rgba(255,255,255,0.2);
}

    /* Cronómetro */
    .progress {
      height: 18px;
      border-radius: 12px;
      background: rgba(0,0,0,.08);
    }
    .progress-bar {
       background: linear-gradient(90deg, #007bff, #3399ff);
    }
    /* Texto con sombra de resaltado */
.text-resaltado {
  color: #03000f; /* letras blancas */

}

  </style>
</head>
<body>
  <div class="wrap text-center">
  <h1 class="mb-3 animate__animated animate__fadeInDown text-resaltado">
    Jerarquía Militar
  </h1>
  <p class="text-resaltado">
    Ordena los grados militares de mayor a menor en el menor tiempo posible. 🪖
  </p>

  <!-- Cronómetro -->
  <div class="progress mb-4">
    <div id="barraTiempo" class="progress-bar progress-bar-striped progress-bar-animated" style="width:0%">0:00</div>
  </div>

  <div class="row">
    <!-- Tarjetas revueltas -->
    <div class="col-md-6 columna" id="colIzquierda">
      <h5 class="mb-3 text-resaltado">Tarjetas disponibles</h5>
      <div id="mazo" class="grid-tarjetas"></div>
    </div>

    <!-- Slots -->
    <div class="col-md-6 columna" id="colDerecha">
      <h5 class="mb-3 text-resaltado">FUERZA DE TIERRA</h5>

      <h6 class="mt-2 text-resaltado">Oficiales Generales</h6>
  <div id="slotsGenerales" class="grid-tarjetas"></div>

      <h6 class="mt-2 text-resaltado">Oficiales Superiores</h6>
      <div id="slotsSuperiores" class="grid-tarjetas"></div>

      <h6 class="mt-3 text-resaltado">Oficiales Subalternos</h6>
      <div id="slotsSubalternos" class="grid-tarjetas"></div>

      <h6 class="mt-3 text-resaltado">Especialistas y Tropa</h6>
      <div id="slotsTropa" class="grid-tarjetas"></div>
    </div>
  </div>
</div>

<!-- 🔥 Botón fijo abajo SIEMPRE visible -->
<div class="text-center mt-3">
  <a href="/minigame" class="btn btn-warning rounded-3">Volver a menú Juegos</a>
</div>

  <script>
  // ================== Configuración ==================
  const ruta = n => `/images/grados/ejer${n}.png`;
  let tiempo = 0;
  let timer;

  const mazo = document.getElementById("mazo");
  const barra = document.getElementById("barraTiempo");

  const slotsGenerales = document.getElementById("slotsGenerales");
  const slotsSuperiores = document.getElementById("slotsSuperiores");
  const slotsSubalternos = document.getElementById("slotsSubalternos");
  const slotsTropa = document.getElementById("slotsTropa");

  
  // ========== Crear cartas mezcladas (1..15) ==========
const cartas = Array.from({length: 15}, (_,i)=> i+1); // [1..15]
cartas.sort(() => Math.random()-0.5);

cartas.forEach(n => {
  const card = document.createElement("div");
  card.className = "tarjeta animate__animated animate__bounceIn";
  card.draggable = true;
  card.dataset.card = String(n);
  card.innerHTML = `<img src="${ruta(n)}" alt="ejer${n}">`;
  mazo.appendChild(card);
});


  // ========== Crear slots según clasificación ==========
  function crearSlot(n, contenedor, fijo=false){
  const slot = document.createElement("div");
  slot.className = "slot";
  slot.dataset.correcto = n;

  // Ningún slot inicia ocupado, todos están vacíos
slot.innerHTML = ``; 

  contenedor.appendChild(slot);
}

// Oficiales Generales (2 y 1)
[2,1].forEach(n => crearSlot(n, slotsGenerales));

// Oficiales Superiores (5, 4 y 3)
[5,4, 3].forEach(n => crearSlot(n, slotsSuperiores));

// Oficiales Subalternos (9 → 6)
[9,8,7,6].forEach(n => crearSlot(n, slotsSubalternos));

// Especialistas y Tropa (15 → 10)
[15,14,13,12,11,10].forEach(n => crearSlot(n, slotsTropa));


  // ========== Drag & Drop ==========
  let dragged = null;

  document.addEventListener("dragstart", e => {
    const t = e.target.closest(".tarjeta");
    if (!t || !t.draggable) return;
    dragged = t;
    e.dataTransfer.effectAllowed = "move";
  });

  document.addEventListener("dragover", e => {
    const slot = e.target.closest(".slot");
    if (slot && !slot.classList.contains("ocupado")) e.preventDefault();
  });

  document.addEventListener("drop", e => {
    const slot = e.target.closest(".slot");
    if (!slot || slot.classList.contains("ocupado") || !dragged) return;

    const esperado = parseInt(slot.dataset.correcto, 10);
    const cartaNum = parseInt(dragged.dataset.card, 10);

    if (esperado === cartaNum) {
  slot.classList.add("ocupado");
  slot.appendChild(dragged);
  dragged.draggable = false;

  // 🎶 Sonido correcto
  const sonidoCorrecto = document.getElementById("sonidoCorrecto");
  sonidoCorrecto.currentTime = 0;
  sonidoCorrecto.play();

  Swal.fire({ toast:true, title:"¡Correcto!", icon:"success", timer:800, showConfirmButton:false });
  verificarFin();
} else {
  // 🎶 Sonido incorrecto
  const sonidoIncorrecto = document.getElementById("sonidoIncorrecto");
  sonidoIncorrecto.currentTime = 0;
  sonidoIncorrecto.play();

  Swal.fire({ toast:true, title:"Incorrecto", icon:"error", timer:800, showConfirmButton:false });
}

  });

  // ========== Cronómetro ascendente ==========
  function iniciarTiempo(){
  timer = setInterval(()=>{
    tiempo++;
    if (tiempo >= 180) { // 3 minutos
      clearInterval(timer);
      Swal.fire({
        title: "⏰ Tiempo terminado",
        text: "Has llegado al límite de 3 minutos, soldado.",
        icon: "warning",
        confirmButtonText: "Reintentar"
      }).then(() => location.reload());
      return;
    }

    const minutos = Math.floor(tiempo/60);
    const segundos = (tiempo%60).toString().padStart(2,'0');
    barra.style.width = Math.min(100,(tiempo/180)*100)+"%"; 
    barra.textContent = `${minutos}:${segundos}`;
  },1000);
}

  iniciarTiempo();

  // ========== Verificar fin ==========
  function verificarFin(){
  const completados = document.querySelectorAll(".slot.ocupado").length;
  if(completados === 15){
    clearInterval(timer);

    const minutos = Math.floor(tiempo / 60);
    const segundos = (tiempo % 60).toString().padStart(2,'0');
    const tiempoFinal = `${minutos}:${segundos}`;

    // 👉 Guardar resultado en la base de datos
    fetch('/guardar-resultado', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        juego: "Jerarquía Militar",  // 👈 nombre del juego
        puntaje: 15,                 // 👈 todas correctas (15 grados)
        tiempo: tiempo               // 👈 segundos usados
      })
    })
    .then(res => res.json())
    .then(data => {
      if (data.ok) {
        console.log("✅ Resultado de Jerarquía Militar guardado en la BD");
      } else {
        console.log("❌ Error al guardar resultado");
      }
    })
    .catch(err => console.error("⚠️ Error en fetch:", err));

    // 🎶 Reproducir himno nacional
    const himno = document.getElementById("himno");
    himno.currentTime = 0;
    himno.play();

    // 🎉 Confeti
    confetti({
      particleCount: 200,
      spread: 120,
      origin: { y: 0.6 },
      colors: ['#4997D0', '#ffffff']
    });

    // 🔥 SweetAlert de victoria
    Swal.fire({
      title: "¡Excelente, Soldado!",
      html: `
        <p>Has dominado la jerarquía militar de Fuerza de Tierra.<br></p>
        <p>⏱️ Tiempo total: <b>${tiempoFinal}</b></p>
      `,
      imageUrl: "/images-requisitos/victoria1.png",
      imageWidth: 200,
      imageHeight: 200,
      imageAlt: "Victoria",
      showCancelButton: true,
      confirmButtonText: "🔄 Reiniciar",
      cancelButtonText: "Ir a minijuegos",
      customClass: {
        title: 'text-resaltado',
        popup: 'animate__animated animate__zoomIn'
      }
    }).then((result) => {
      himno.pause();
      himno.currentTime = 0;

      if (result.isConfirmed) {
        location.reload();
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        localStorage.setItem("tiempo_quiz_grados", tiempoFinal);
        window.location.href = "/minigame";
      }
    });
  }
}

 

</script>
<audio id="himno" src="/audio/himno_guatemala.mp3"></audio>
<audio id="sonidoCorrecto" src="/audio/correcto.mp3"></audio>
<audio id="sonidoIncorrecto" src="/audio/incorrecto.mp3"></audio>

<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>

</body>
</html>
